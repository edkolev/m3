// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package debug

import (
	"encoding/json"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/m3db/m3/src/cmd/services/m3query/config"
	"github.com/m3db/m3/src/query/api/v1/handler/prometheus/native"
	"github.com/m3db/m3/src/query/storage/mock"

	"github.com/m3db/m3/src/query/executor"
	"github.com/m3db/m3/src/query/models"

	"github.com/stretchr/testify/require"
	"github.com/uber-go/tally"
)

func newBody() io.Reader {
	return strings.NewReader(
		`
		{
			"input": {
				"status": "success",
				"data": {
					"resultType": "matrix",
					"result": [
						{
							"metric": {
								"__name__": "go_gc_duration_seconds",
								"instance": "localhost:9090",
								"job": "prometheus",
								"quantile": "1"
							},
							"values": [
								[
									1543434961.200,
									"0.0032431"
								],
								[
									1543434975.200,
									"0.0032431"
								],
								[
									1543434989.200,
									"0.0122029"
								],
								[
									1543435003.200,
									"0.0122029"
								]
							]
						}
					]
				}
			},
			"results": {
				"status": "success",
				"data": {
					"resultType": "matrix",
					"result": [
						{
							"metric": {
								"__name__": "go_gc_duration_seconds",
								"instance": "localhost:9090",
								"job": "prometheus",
								"quantile": "1"
							},
							"values": [
								[
									1543434961.200,
									"0.0032431"
								],
								[
									1543434975.200,
									"0.0032431"
								],
								[
									1543434989.200,
									"0.0122029"
								],
								[
									1543435003.200,
									"0.0122029"
								]
							]
						}
					]
				}
			}
		}
		`,
	)
}

type AutoGenerated struct {
	MismatchesList []struct {
		Mismatches []struct {
			Name     string  `json:"name"`
			PromVal  float64 `json:"promVal"`
			PromTime string  `json:"promTime"`
			M3Val    float64 `json:"m3Val"`
			M3Time   string  `json:"m3Time"`
		} `json:"mismatches"`
	} `json:"mismatches_list"`
}

func TestValidateEndpoint(t *testing.T) {
	mockStorage := mock.NewMockStorage()
	debugHandler := NewPromDebugHandler(
		native.NewPromReadHandler(
			executor.NewEngine(mockStorage, tally.NewTestScope("test_engine", nil)),
			models.NewTagOptions(),
			&config.LimitsConfiguration{},
		), tally.NewTestScope("test", nil),
	)

	server := httptest.NewServer(debugHandler)
	defer server.Close()

	req, _ := http.NewRequest("POST", PromDebugURL+"?start=1543431405&end=1543435005&step=14&query=go_gc_duration_seconds", newBody())
	recorder := httptest.NewRecorder()
	debugHandler.ServeHTTP(recorder, req)

	var mismatches AutoGenerated
	require.NoError(t, json.Unmarshal(recorder.Body.Bytes(), &mismatches))

	assert.Len(t, mismatches.MismatchesList, 1)
	assert.Len(t, mismatches.MismatchesList[0].Mismatches, 2)
	assert.Equal(t, "series_0", mismatches.MismatchesList[0].Mismatches[0].Name)
}
